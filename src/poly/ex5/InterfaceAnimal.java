package poly.ex5;

/**
 * 인터페이스 개념
 * : 자바는 순수 추상 클래스를 더 편리하게 사용할 수 있는 인터페이스라는 기능을 제공한다.
 *
 *
 * 인터페이스 특징
 * 인터페이스는 순수 추상 클래스의 특징을 가진다.
 * - 인스턴스를 생성할 수 없다.
 * - 상속시 모든 메서드를 오버라이딩 해야 한다.
 * - 다형성을 위해 사용된다.
 *
 * 인터페이스는 추가로 편의 기능을 제공한다.
 * - 추상 클래스의 모든 메서드는 public abstract이므로
 *   메서드에 public abstract를 생략할 수 있다. (생략 권장)
 *   멤버 변수는 public static final이고 생략할 수 있다. (생략 권장)
 *
 * - 인터페이스는 다중 구현(다중 상속)을 지원한다.
 *
 *
 * 굳이 추상 클래스가 아닌 인터페이스를 사용해야 하는 이유
 * - 제약
 *   1.추상 메서드를 반드시 구현하라는 제약을 준다.
 *   2.다형성이라는 목적으로 모두 구현해야 한다고 구분해 주어
 *    로직이 있는 기능을 추가하지 못하게 원천적으로 차단할 수 있다. (단, 자바8에 등장한 default 메서드는 가능)
 *
 * - 다중 구현(다중 상속)
 *   클래스 상속은 부모를 하나만 지정할 수 있지만
 *   부모를 여러명 두는 다중 구현이 가능하다.
 *   인터페이스는 모두 추상 메서드로 이루어졌기에 가능한 것이다.
 */
public interface InterfaceAnimal {
    public static final int ab = 3;

    public abstract void sound(); // 추상 메서드만 가능하기에
    void move();                  // public abstract을 생략한다.
}
